@page "/New"
@using EmailSender.Models
@using EmailSender.Services
@using MailKit
@using MailKit.Security
@using MimeKit
@using System.Net.Sockets
@inject EmailService EmailSender
@inject ILogger<SendMessagePage> Logger;
@rendermode InteractiveServer
<PageTitle>Новое письмо</PageTitle>
<h3 style="horiz-align: center">Новое письмо!</h3>
<br>
<EditForm Model="@_emailMessage" OnValidSubmit="OnSubmitEmail" FormName="SendMessageForm">
    <DataAnnotationsValidator/>

    <div class="form-group">
        <label for="email">Кому</label>
        <InputText @bind-Value="_emailMessage.Email" class="form-control" id="email"/>
        <ValidationMessage For="() => _emailMessage.Email"/>

    </div>

    <div class="form-group">
        <label for="subject">Тема</label>
        <InputText @bind-Value=_emailMessage.Subject class="form-control" id="subject"/>
        <ValidationMessage For="() => _emailMessage.Subject"/>
    </div>
    <hr style="margin: 20px 0;">
    <div class="form-group">
        <label for="message">Сообщение</label>
        <InputTextArea @bind-Value=_emailMessage.Text class="form-control" id="message"/>
        <ValidationMessage For="() => _emailMessage.Text"/>
    </div>
    <button type="submit" class="sendEmailSubmitButton">
        <strong>Отправить</strong>
    </button>
    @* <ValidationSummary/> *@

</EditForm>

@result

@code {

    string result;
    int countAttempts = 0;
    EmailModel _emailMessage = new();

    private async Task OnSubmitEmail()
    {
        countAttempts++;
        Logger.LogInformation("Попытка отправки Email.. ([{x}])", countAttempts);
        try
        {
            result = "Отправка...";
            await EmailSender.SendMessageAsync(_emailMessage.Email, _emailMessage.Subject, _emailMessage.Text);
            result = "Письмо успешно отправлено!";
            Logger.LogInformation("Email отправлен успешно!");
            {
                EmailHistoryJsonService saver = new();
                await saver.AddToHistory(new EmailModel()
                {
                    Date = DateOnly.FromDateTime(DateTime.Now),
                    Email = _emailMessage.Email,
                    Subject = _emailMessage.Subject,
                    Text = _emailMessage.Text
                });
            }
            _emailMessage = new();
        }
        catch (Exception e) when (e is OperationCanceledException)
        {
            result = "Операция отменена!";
        }
        catch (Exception e) when (countAttempts < 3 &&
                                  e is ServiceNotConnectedException
                                      or ServiceNotAuthenticatedException
                                      or ProtocolException
                                      or IOException
                                      or CommandException
                                      or SocketException
                                 )
        {
            await Task.Delay(5000);
            await OnSubmitEmail();
        }
        catch (Exception e) when (countAttempts >= 3)
        {
            result = "Ошибка подключения к серверу, повторите позже!";
            Logger.LogError(e, "Ошибка отправки письма после 3 повторений!");
        }
        catch (Exception e) when (e is ArgumentNullException
                                      or ObjectDisposedException
                                      or InvalidOperationException
                                      or AuthenticationException
                                      or SaslException
                                 )
        {
            result = "Произошла внутренняя ошибка сервера! Пожалуйста повторите позже";
            Logger.LogError(e, "Ошибка отправки письма! Требует внимания!");
        }
        catch (Exception e) when (e is ParseException)
        {
            result = "Произошла внутренняя ошибка сервера! Пожалуйста повторите позже!";
            Logger.LogError(e, "ОШИБКА! Проверьте appsettings.json");
        }
        catch (Exception e)
        {
            result = "Неизвестная ошибка! Пожалуйста повторите позже!";
            Logger.LogCritical(e, "Необработанное исключение!!!");
        }
        finally
        {
            countAttempts = 0;
        }
    }

}