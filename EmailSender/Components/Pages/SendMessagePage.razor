@page "/New"
@using EmailSender.Models
@using EmailSender.Services
@inject EmailService EmailSender
@inject ILogger<SendMessagePage> Logger;
@rendermode InteractiveServer
<PageTitle>Новое письмо</PageTitle>
<h3 style="horiz-align: center">Новое письмо!</h3>
<br>
<EditForm Model="@_emailMessage" OnValidSubmit="OnSubmitEmail" FormName="SendMessageForm">
    <DataAnnotationsValidator/>

    <div class="form-group">
        @* <input type="email" placeholder="Кому: " class="emailInputs" id="emailInp"> *@
        <label for="email">Кому</label>
        <InputText @bind-Value="_emailMessage.Email" class="form-control" id="email"/>
        <ValidationMessage For="() => _emailMessage.Email" />

    </div>

    <div class="form-group">
        @* <input type="text" placeholder="Тема: " class="emailInputs" id="subjectInp"> *@
        <label for="subject">Тема</label>
        <InputText @bind-Value=_emailMessage.Subject class="form-control" id="subject"/>
        <ValidationMessage For="() => _emailMessage.Subject" />
    </div>
    <hr style="margin: 20px 0;">
    <div class="form-group">
        <label for="message">Сообщение</label>
        <InputTextArea @bind-Value=_emailMessage.Text class="form-control" id="message"/>
        <ValidationMessage For="() => _emailMessage.Text"/>
    </div>
    <button type="submit" class="sendEmailSubmitButton">
        <strong>Отправить</strong>
    </button>
    @* <ValidationSummary/> *@
    
</EditForm>

@result

@code {
    
    string result;
    EmailModel _emailMessage = new();
    
    private async Task OnSubmitEmail()
    {
        Logger.LogInformation("Попытка отправки Email");
        try
        {
            result = "Отправка...";
            await EmailSender.SendMessageAsync(_emailMessage.Email, _emailMessage.Subject, _emailMessage.Text);
            result = "Письмо успешно отправлено!";
            _emailMessage = new();
        }
        catch (Exception ex)
        {
            result = ex.Message;
        }
    }

}